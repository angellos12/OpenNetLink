@page "/"
@using System.Diagnostics
@using OpenNetLinkApp.Services
@using System.Security.Authentication
@using OpenNetLinkApp.Page.Event
@using OpenNetLinkApp.Models.SGNetwork
@using OpenNetLinkApp.Models.SGSideBar
@using OpenNetLinkApp.Data 
@inject IJSRuntime JSRuntime
@inject NavigationManager MyNavigationManager
@inject XmlConfService XmlConf
@inject HSCmdCenter HSCmdCenter
@inject ISGAppManagerService SGAppMgrSvc

<div class="hold-transition login-page" style="background:url('/images/adminlte/login_full.png')no-repeat center center; background-size:cover;">
    <div class="login-box  p-0 m-0" style="height:413px; width:880px !important;">
        <div class="card p-0" style="border-radius:.7rem !important; background-color:rgba(0,0,0,0.7);">
            <div class="card-body login-card-body  p-0">
                <div class="row1">
                    <div class="col-md-6 login-card-body  pt-0 pb-0" style="border-radius:.7rem 0rem 0rem .7rem !important;">
                        <ul class="full_login_left">
                            <li> <img src="/images/adminlte/SecureGate_logo.png" class="logo"></li>
                            <li>
                                <span>
                                    This is a solution providing the data transmission service <br>
                                    among networks with the highest level of security <br>
                                    in the separated network environment.
                                </span>
                            </li>
                            <li><img src="/images/adminlte/login_full_1.png" class="bg"></li>
                        </ul>
                    </div>

                    <div class="col-md-6 login-card-body" style="height:413px; border-radius:0rem .7rem .7rem 0rem !important;">

                        <div style=" width:310px;">
                            <p class="login-box-msg1" style=" padding-top:50px;color:#fff; font-size:1.5rem;">@strSystemName <span class="full_txt">@strConNetwork </span></p>



                            <input type="text" class="full-input mb-3 username" placeholder="ID" @bind="id">

                            <input type="password" class="full-input mb-2 password" placeholder="password" @bind="pw" @onkeyup="keyCheck">

                            <div class="row p-0">
                                <div class="col-md-12 mt-1 ">
                                    <div class="form-group float-right">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" style="margin-top: 0.2rem !important;">
                                            <label class="form-check-label" style="color:#fff;">@strAutoLogin</label>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-md-12 text-center">
                                    <button @onclick="doLogIn" class="full_login_btn btn mb-3">LOGIN</button>
                                    <div class="full_copy">COPYRIGHT &copy 2020 HANSSAK. ALL RIGHTS RESERVED</div>
                                </div>
                            </div>

                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
</div>

@code {
    public string id { get; set; }
    public string pw { get; set; }

    public string strSystemName = "";
    public string strConNetwork = "";
    public string strAutoLogin = "";

    ISGUserInfoService sgUserSvr;

    private void keyCheck(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter")
            doLogIn();
    }
    private void doLogIn()
    {
        try
        {
            Console.WriteLine("ID:" + id);
            Console.WriteLine("PW:" + pw);
            //HSCmdCenter.Login(0,id,pw);
            MyNavigationManager.NavigateTo("/Transfer");
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        object[] param = { "none" };
        await JSRuntime.InvokeAsync<object>("initLogIn", param);

        await JSRuntime.InvokeAsync<object>("InitDragAndDrop");
        await JSRuntime.InvokeAsync<object>("addMouseDown");
        await JSRuntime.InvokeAsync<object>("addMouseUp");
        await JSRuntime.InvokeAsync<object>("addDragStart");

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        InitText();
        HSCmdCenter.LoginResult_Event += LoginResult;
        base.OnInitialized();
        sgUserSvr = SGAppMgrSvc.UserInfoService;
    }

    public void InitText()
    {
        strSystemName = XmlConf.GetTitle("T_SYSTEMNAME2");                  // 망연계 솔루션
        strConNetwork = XmlConf.GetTitle("T_COMMON_LOGININNER");            // 업무망
        strAutoLogin = XmlConf.GetTitle("T_ETC_AUTOLOGIN_CHECKBOX");        // 자동로그인
    }

    public void LoginResult(int groupId, PageEventArgs e)
    {
        int ret = e.result;
        if (ret == 0)
        {
            SGLoginData sgLoginData = (SGLoginData)HSCmdCenter.GetLoginData(groupId);
            SGUserData sgUserData = (SGUserData)HSCmdCenter.GetUserData(groupId);
            sgUserSvr.SetUserInfo(groupId, sgLoginData, sgUserData);
            MyNavigationManager.NavigateTo("/Transfer");
        }
        else
        {
            string strPopupMsg = e.strMsg;
            strPopupMsg.Replace("/r/n", "<br/>");
            ShowLoginFail(strPopupMsg);
        }
    }

    private void ShowLoginFail(string strMsg)
    {
        //type: success, info, waring, error 2020/07/02 YKH
        object[] param = { "error", strSystemName, strMsg };
        JSRuntime.InvokeAsync<object>("fireToastMessage", param);
    }

}
