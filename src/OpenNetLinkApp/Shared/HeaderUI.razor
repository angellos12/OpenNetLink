@using System.Collections.Generic
@using OpenNetLinkApp.Models.SGHeader
@using OpenNetLinkApp.Models.SGSideBar

@inject ISGAppManagerService SGAppMgrSvc

@implements IDisposable

<!-- Navbar -->
<SGHeaderUI HeaderUISvc="@HeaderUISvc" ActiveMenu="@SideBarUISvc.ActiveMenu" />
<!-- /.navbar -->

@code
{
    ISGHeaderUIService  HeaderUISvc;
    ISGSideBarUIService SideBarUISvc;

    protected override void OnInitialized()
    {
        HeaderUISvc = SGAppMgrSvc.HeaderUIService;
        SideBarUISvc = SGAppMgrSvc.SideBarUIService;
        SideBarUISvc.ActiveMenu ??= new OpenNetLinkApp.Models.SGSideBar.SGSideBarUI
        {
            GroupId = 0,
            CategoryId = LSIDEBAR.MENU_CATE_FILE,
            Parent = null,
            FromName = String.Empty,
            ToName = String.Empty,
            Icon = String.Empty,
            Path = "/Transter",
            ToolTip = String.Empty,
            BadgeType = String.Empty,
            BadgeValue = String.Empty,
            Actived = false,
            Expanded = false,
            IsSubMenu = false,
            DicChild = null
        };
        HeaderUISvc.OnChangeHeader += StateHasChanged;
        /* For: Change Header UI State to be rendered according to Sidebar action */
        SideBarUISvc.OnChangeActMenu += StateHasChanged;
    }

    public void Dispose()
    {
        HeaderUISvc.OnChangeHeader -= StateHasChanged;
        SideBarUISvc.OnChangeActMenu -= StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            StateHasChanged();
        }
    }
}